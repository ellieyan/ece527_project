
rle.elf:     file format elf32-msp430

SYMBOL TABLE:
0000a000 l    d  .text	00000000 .text
0000a3ca l    d  .rodata	00000000 .rodata
00000200 l    d  .data	00000000 .data
00000202 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001610 l    d  .noinit.crt0	00000000 .noinit.crt0
00000000 l    df *ABS*	00000000 rle.c
0000a070 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 omsp_func.c
00000000 l    df *ABS*	00000000 malloc.c
00000204 l     O .bss	00000001 once.1402
00000000 l    df *ABS*	00000000 puts.c
00000206 g     O .bss	00000004 Microseconds
0000a250 g     F .text	00000032 putchar
00000002 g       *ABS*	00000000 __data_size
0000a070  w      .text	00000000 __isr_14
0000020a g     O .bss	00000004 Dhrystones_Per_Second
0000a070  w      .text	00000000 __isr_4
00000138 g       *ABS*	00000000 __OP2
0000020e g     O .bss	00000004 User_Time
00000212 g     O .bss	00000004 Begin_Time
00000130 g       *ABS*	00000000 __MPY
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
0000a418 g       *ABS*	00000000 _etext
0000140e g       *ABS*	00000000 __bss_size
0000a000  w      .text	00000000 __watchdog_support
0000a3c4  w      .text	00000000 __stop_progExec__
0000a152 g     F .text	00000078 rle_decode
0000a396 g     F .text	0000002c puts
0000a070  w      .text	00000000 __isr_11
0000a282 g     F .text	0000010c malloc
00000200 g     O .data	00000002 o
00000216 g     O .bss	00001388 Arr_2_Glob
0000a070  w      .text	00000000 __isr_5
0000a418 g       *ABS*	00000000 __data_load_start
0000a070 g       .text	00000000 __dtors_end
00001610 g       .bss	00000000 __bss_end
0000a070  w      .text	00000000 __isr_2
0000a074 g     F .text	000000de rle_encode
0000159e g     O .bss	00000004 End_Time
0000a070  w      .text	00000000 __isr_10
000015a2 g     O .bss	00000002 Next_Ptr_Glob
0000013c g       *ABS*	00000000 __RESHI
00001610 g     O .noinit.crt0	00000002 __wdt_clear_value
0000a070  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000a070  w      .text	00000000 __isr_0
0000a028  w      .text	00000000 __do_clear_bss
00000202 g     O .bss	00000002 Reg
0000a1ca g     F .text	00000086 run_bm
000015a4 g     O .bss	00000002 Int_Glob
000015a6 g     O .bss	00000001 Ch_1_Glob
0000a3c2  w      .text	00000000 _unexpected_
0000a070  w      .text	00000000 __isr_8
000015a7 g     O .bss	00000001 Ch_2_Glob
0000a070  w      .text	00000000 __isr_3
000015a8 g     O .bss	00000002 Ptr_Glob
0000a000  w      .text	00000000 _reset_vector__
0000a070 g       .text	00000000 __ctors_start
0000a070  w      .text	00000000 __isr_12
0000a010  w      .text	00000000 __do_copy_data
00000202 g       .bss	00000000 __bss_start
0000a03e g     F .text	00000032 main
0000a070  w      .text	00000000 __isr_13
00010000 g       .vectors	00000000 _vectors_end
0000a070  w      .text	00000000 __isr_9
0000a00c  w      .text	00000000 __init_stack
0000a070 g       .text	00000000 __dtors_start
0000a070  w      .text	00000000 __isr_6
0000a070 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
00004200 g       *ABS*	00000000 __stack
0000a070  w      .text	00000000 __isr_1
00000202 g       .data	00000000 _edata
00001610 g       .bss	00000000 _end
000015aa g     O .bss	00000064 Arr_1_Glob
00000134 g       *ABS*	00000000 __MAC
0000a3c4  w      .text	00000000 _endless_loop__
0000a010  w      .text	00000000 __low_level_init
0000160e g     O .bss	00000002 Bool_Glob
00000200 g       .data	00000000 __data_start
00000120 g       *ABS*	00000000 __WDTCTL
0000013e g       *ABS*	00000000 __SUMEXT
0000a38e g     F .text	00000008 free



Disassembly of section .text:

0000a000 <__watchdog_support>:
    a000:	55 42 20 01 	mov.b	&0x0120,r5	
    a004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    a008:	82 45 10 16 	mov	r5,	&0x1610	

0000a00c <__init_stack>:
    a00c:	31 40 00 42 	mov	#16896,	r1	;#0x4200

0000a010 <__do_copy_data>:
    a010:	3f 40 02 00 	mov	#2,	r15	;#0x0002
    a014:	0f 93       	tst	r15		
    a016:	08 24       	jz	$+18     	;abs 0xa028
    a018:	92 42 10 16 	mov	&0x1610,&0x0120	
    a01c:	20 01 
    a01e:	2f 83       	decd	r15		
    a020:	9f 4f 18 a4 	mov	-23528(r15),512(r15);0xa418(r15), 0x0200(r15)
    a024:	00 02 
    a026:	f8 23       	jnz	$-14     	;abs 0xa018

0000a028 <__do_clear_bss>:
    a028:	3f 40 0e 14 	mov	#5134,	r15	;#0x140e
    a02c:	0f 93       	tst	r15		
    a02e:	07 24       	jz	$+16     	;abs 0xa03e
    a030:	92 42 10 16 	mov	&0x1610,&0x0120	
    a034:	20 01 
    a036:	1f 83       	dec	r15		
    a038:	cf 43 02 02 	mov.b	#0,	514(r15);r3 As==00, 0x0202(r15)
    a03c:	f9 23       	jnz	$-12     	;abs 0xa030

0000a03e <main>:
}

int main ()
/*****/

{
    a03e:	04 41       	mov	r1,	r4	
    a040:	24 53       	incd	r4		
  STOP_WATCHDOG;
    a042:	3f 40 20 01 	mov	#288,	r15	;#0x0120
    a046:	bf 40 80 5a 	mov	#23168,	0(r15)	;#0x5a80, 0x0000(r15)
    a04a:	00 00 
  START_TIME;  // Set P3[0]
    a04c:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    a050:	df 43 00 00 	mov.b	#1,	0(r15)	;r3 As==01, 0x0000(r15)

  run_bm();
    a054:	b0 12 ca a1 	call	#0xa1ca	

  END_TIME;  // Clear P3[0]
    a058:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    a05c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
  printf("RLE DONE \n");
    a060:	3f 40 0e a4 	mov	#-23538,r15	;#0xa40e
    a064:	b0 12 96 a3 	call	#0xa396	
  DHRYSTONE_DONE;
    a068:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    a06c:	df 43 00 00 	mov.b	#1,	0(r15)	;r3 As==01, 0x0000(r15)

0000a070 <__ctors_end>:
    a070:	30 40 c2 a3 	br	#0xa3c2	

0000a074 <rle_encode>:
                Dhrystones_Per_Second;

const char *o = "WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW";

int rle_encode(char *out, const char *in, int l)
{
    a074:	04 12       	push	r4		
    a076:	04 41       	mov	r1,	r4	
    a078:	24 53       	incd	r4		
    a07a:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    a07e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    a082:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    a086:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
  int dl, i;
  char cp, c;

  for(cp=c= *in++, i = 0, dl=0; l>0 ; c = *in++, l-- ) {
    a08a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a08e:	e4 4f f7 ff 	mov.b	@r15,	-9(r4)	;0xfff7(r4)
    a092:	d4 44 f7 ff 	mov.b	-9(r4),	-10(r4)	;0xfff7(r4), 0xfff6(r4)
    a096:	f6 ff 
    a098:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    a09c:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    a0a0:	84 43 f2 ff 	mov	#0,	-14(r4)	;r3 As==00, 0xfff2(r4)
    a0a4:	3b 3c       	jmp	$+120    	;abs 0xa11c
    if ( c == cp ) {
    a0a6:	d4 94 f6 ff 	cmp.b	-10(r4),-9(r4)	;0xfff6(r4), 0xfff7(r4)
    a0aa:	f7 ff 
    a0ac:	18 20       	jnz	$+50     	;abs 0xa0de
      i++;
    a0ae:	94 53 f4 ff 	inc	-12(r4)	;0xfff4(r4)
      if ( i > 255 ) {
    a0b2:	b4 90 00 01 	cmp	#256,	-12(r4)	;#0x0100, 0xfff4(r4)
    a0b6:	f4 ff 
    a0b8:	26 38       	jl	$+78     	;abs 0xa106
        *out++ = 255;
    a0ba:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a0be:	ff 43 00 00 	mov.b	#-1,	0(r15)	;r3 As==11, 0x0000(r15)
    a0c2:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
        *out++ = c; dl += 2;
    a0c6:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a0ca:	df 44 f7 ff 	mov.b	-9(r4),	0(r15)	;0xfff7(r4), 0x0000(r15)
    a0ce:	00 00 
    a0d0:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    a0d4:	a4 53 f2 ff 	incd	-14(r4)	;0xfff2(r4)
        i = 1;
    a0d8:	94 43 f4 ff 	mov	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    a0dc:	14 3c       	jmp	$+42     	;abs 0xa106
      }
    } else {
      *out++ = i;
    a0de:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    a0e2:	4e 4f       	mov.b	r15,	r14	
    a0e4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a0e8:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    a0ec:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
      *out++ = cp; dl += 2;
    a0f0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a0f4:	df 44 f6 ff 	mov.b	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    a0f8:	00 00 
    a0fa:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    a0fe:	a4 53 f2 ff 	incd	-14(r4)	;0xfff2(r4)
      i = 1;
    a102:	94 43 f4 ff 	mov	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    }
    cp = c;
    a106:	d4 44 f7 ff 	mov.b	-9(r4),	-10(r4)	;0xfff7(r4), 0xfff6(r4)
    a10a:	f6 ff 
int rle_encode(char *out, const char *in, int l)
{
  int dl, i;
  char cp, c;

  for(cp=c= *in++, i = 0, dl=0; l>0 ; c = *in++, l-- ) {
    a10c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a110:	e4 4f f7 ff 	mov.b	@r15,	-9(r4)	;0xfff7(r4)
    a114:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    a118:	b4 53 fc ff 	add	#-1,	-4(r4)	;r3 As==11, 0xfffc(r4)
    a11c:	94 93 fc ff 	cmp	#1,	-4(r4)	;r3 As==01, 0xfffc(r4)
    a120:	c2 37       	jge	$-122    	;abs 0xa0a6
      *out++ = cp; dl += 2;
      i = 1;
    }
    cp = c;
  }
  *out++ = i; *out++ = cp; dl += 2;
    a122:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    a126:	4e 4f       	mov.b	r15,	r14	
    a128:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a12c:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    a130:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    a134:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a138:	df 44 f6 ff 	mov.b	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    a13c:	00 00 
    a13e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    a142:	a4 53 f2 ff 	incd	-14(r4)	;0xfff2(r4)
  return dl;
    a146:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
}
    a14a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    a14e:	34 41       	pop	r4		
    a150:	30 41       	ret			

0000a152 <rle_decode>:

int rle_decode(char *out, const char *in, int l)
{
    a152:	04 12       	push	r4		
    a154:	04 41       	mov	r1,	r4	
    a156:	24 53       	incd	r4		
    a158:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    a15c:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    a160:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    a164:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
  int i, tb;
  char c;

  for(tb=0 ; l>0 ; l -= 2 ) {
    a168:	84 43 f4 ff 	mov	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    a16c:	25 3c       	jmp	$+76     	;abs 0xa1b8
    i = *in++;
    a16e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a172:	6f 4f       	mov.b	@r15,	r15	
    a174:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    a178:	94 11 f2 ff 	sxt	-14(r4)	;0xfff2(r4)
    a17c:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    c = *in++;
    a180:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a184:	e4 4f f6 ff 	mov.b	@r15,	-10(r4)	;0xfff6(r4)
    a188:	94 53 fa ff 	inc	-6(r4)		;0xfffa(r4)
    tb += i;
    a18c:	94 54 f2 ff 	add	-14(r4),-12(r4)	;0xfff2(r4), 0xfff4(r4)
    a190:	f4 ff 
    while(i-- > 0) *out++ = c;
    a192:	07 3c       	jmp	$+16     	;abs 0xa1a2
    a194:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a198:	df 44 f6 ff 	mov.b	-10(r4),0(r15)	;0xfff6(r4), 0x0000(r15)
    a19c:	00 00 
    a19e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    a1a2:	5f 43       	mov.b	#1,	r15	;r3 As==01
    a1a4:	94 93 f2 ff 	cmp	#1,	-14(r4)	;r3 As==01, 0xfff2(r4)
    a1a8:	01 34       	jge	$+4      	;abs 0xa1ac
    a1aa:	4f 43       	clr.b	r15		
    a1ac:	b4 53 f2 ff 	add	#-1,	-14(r4)	;r3 As==11, 0xfff2(r4)
    a1b0:	4f 93       	tst.b	r15		
    a1b2:	f0 23       	jnz	$-30     	;abs 0xa194
int rle_decode(char *out, const char *in, int l)
{
  int i, tb;
  char c;

  for(tb=0 ; l>0 ; l -= 2 ) {
    a1b4:	a4 83 fc ff 	decd	-4(r4)		;0xfffc(r4)
    a1b8:	94 93 fc ff 	cmp	#1,	-4(r4)	;r3 As==01, 0xfffc(r4)
    a1bc:	d8 37       	jge	$-78     	;abs 0xa16e
    i = *in++;
    c = *in++;
    tb += i;
    while(i-- > 0) *out++ = c;
  }
  return tb;
    a1be:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
}
    a1c2:	31 50 0c 00 	add	#12,	r1	;#0x000c
    a1c6:	34 41       	pop	r4		
    a1c8:	30 41       	ret			

0000a1ca <run_bm>:

/// CHECK IF YOU CAN IMPLEMENT THE HORNER's METHOD IN TI's DOCS
void run_bm()
{
    a1ca:	04 12       	push	r4		
    a1cc:	04 41       	mov	r1,	r4	
    a1ce:	24 53       	incd	r4		
    a1d0:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
  char *d = malloc(2*strlen(o));
    a1d4:	1f 42 00 02 	mov	&0x0200,r15	
    a1d8:	0e 4f       	mov	r15,	r14	
    a1da:	0f 4e       	mov	r14,	r15	
    a1dc:	1f 83       	dec	r15		
    a1de:	1f 53       	inc	r15		
    a1e0:	cf 93 00 00 	tst.b	0(r15)		;0x0000(r15)
    a1e4:	fc 23       	jnz	$-6      	;abs 0xa1de
    a1e6:	0f 8e       	sub	r14,	r15	
    a1e8:	0f 5f       	rla	r15		
    a1ea:	b0 12 82 a2 	call	#0xa282	
    a1ee:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
  char *oc = malloc(strlen(o));
    a1f2:	1f 42 00 02 	mov	&0x0200,r15	
    a1f6:	0e 4f       	mov	r15,	r14	
    a1f8:	0f 4e       	mov	r14,	r15	
    a1fa:	1f 83       	dec	r15		
    a1fc:	1f 53       	inc	r15		
    a1fe:	cf 93 00 00 	tst.b	0(r15)		;0x0000(r15)
    a202:	fc 23       	jnz	$-6      	;abs 0xa1fc
    a204:	0f 8e       	sub	r14,	r15	
    a206:	b0 12 82 a2 	call	#0xa282	
    a20a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)

  int rl = rle_encode(d, o, strlen(o));
    a20e:	1f 42 00 02 	mov	&0x0200,r15	
    a212:	0e 4f       	mov	r15,	r14	
    a214:	0f 4e       	mov	r14,	r15	
    a216:	1f 83       	dec	r15		
    a218:	1f 53       	inc	r15		
    a21a:	cf 93 00 00 	tst.b	0(r15)		;0x0000(r15)
    a21e:	fc 23       	jnz	$-6      	;abs 0xa218
    a220:	0f 8e       	sub	r14,	r15	
    a222:	0e 4f       	mov	r15,	r14	
    a224:	1f 42 00 02 	mov	&0x0200,r15	
    a228:	0d 4e       	mov	r14,	r13	
    a22a:	0e 4f       	mov	r15,	r14	
    a22c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a230:	b0 12 74 a0 	call	#0xa074	
    a234:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)

  free(d); free(oc);
    a238:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a23c:	b0 12 8e a3 	call	#0xa38e	
    a240:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a244:	b0 12 8e a3 	call	#0xa38e	
}
    a248:	31 50 06 00 	add	#6,	r1	;#0x0006
    a24c:	34 41       	pop	r4		
    a24e:	30 41       	ret			

0000a250 <putchar>:

//--------------------------------------------------//
//                 putChar function                 //
//            (Send a byte to the Port-1)           //
//--------------------------------------------------//
int putchar (int txdata) {
    a250:	04 12       	push	r4		
    a252:	04 41       	mov	r1,	r4	
    a254:	24 53       	incd	r4		
    a256:	21 83       	decd	r1		
    a258:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)

  // Write the output character to the Port-1
  P1OUT  = txdata;
    a25c:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    a260:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    a264:	4e 4e       	mov.b	r14,	r14	
    a266:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

  // Toggle Port-2[0] to signal new byte
  P2OUT ^= 0x01;
    a26a:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    a26e:	3e 40 29 00 	mov	#41,	r14	;#0x0029
    a272:	6e 4e       	mov.b	@r14,	r14	
    a274:	5e e3       	xor.b	#1,	r14	;r3 As==01
    a276:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

  return 0;
    a27a:	0f 43       	clr	r15		
}
    a27c:	21 53       	incd	r1		
    a27e:	34 41       	pop	r4		
    a280:	30 41       	ret			

0000a282 <malloc>:
    a282:	0b 12       	push	r11		
    a284:	0a 12       	push	r10		
    a286:	09 12       	push	r9		
    a288:	08 12       	push	r8		
    a28a:	07 12       	push	r7		
    a28c:	06 12       	push	r6		
    a28e:	05 12       	push	r5		
    a290:	04 12       	push	r4		
    a292:	3d 40 11 16 	mov	#5649,	r13	;#0x1611
    a296:	3d f0 fe ff 	and	#-2,	r13	;#0xfffe
    a29a:	c2 93 04 02 	tst.b	&0x0204	
    a29e:	05 20       	jnz	$+12     	;abs 0xa2aa
    a2a0:	d2 43 04 02 	mov.b	#1,	&0x0204	;r3 As==01
    a2a4:	bd 40 fe ff 	mov	#-2,	0(r13)	;#0xfffe, 0x0000(r13)
    a2a8:	00 00 
    a2aa:	0a 41       	mov	r1,	r10	
    a2ac:	3a 50 d8 ff 	add	#-40,	r10	;#0xffd8
    a2b0:	0c 4f       	mov	r15,	r12	
    a2b2:	1c 53       	inc	r12		
    a2b4:	12 c3       	clrc			
    a2b6:	0c 10       	rrc	r12		
    a2b8:	03 3c       	jmp	$+8      	;abs 0xa2c0
    a2ba:	1e 53       	inc	r14		
    a2bc:	0e 5e       	rla	r14		
    a2be:	0d 5e       	add	r14,	r13	
    a2c0:	2f 4d       	mov	@r13,	r15	
    a2c2:	0e 4f       	mov	r15,	r14	
    a2c4:	12 c3       	clrc			
    a2c6:	0e 10       	rrc	r14		
    a2c8:	55 43       	mov.b	#1,	r5	;r3 As==01
    a2ca:	3e 90 ff 7f 	cmp	#32767,	r14	;#0x7fff
    a2ce:	01 24       	jz	$+4      	;abs 0xa2d2
    a2d0:	45 43       	clr.b	r5		
    a2d2:	1f f3       	and	#1,	r15	;r3 As==01
    a2d4:	50 20       	jnz	$+162    	;abs 0xa376
    a2d6:	45 93       	tst.b	r5		
    a2d8:	16 24       	jz	$+46     	;abs 0xa306
    a2da:	08 4a       	mov	r10,	r8	
    a2dc:	0e 4a       	mov	r10,	r14	
    a2de:	8e 10       	swpb	r14		
    a2e0:	8e 11       	sxt	r14		
    a2e2:	8e 10       	swpb	r14		
    a2e4:	8e 11       	sxt	r14		
    a2e6:	09 4e       	mov	r14,	r9	
    a2e8:	06 4d       	mov	r13,	r6	
    a2ea:	0e 4d       	mov	r13,	r14	
    a2ec:	8e 10       	swpb	r14		
    a2ee:	8e 11       	sxt	r14		
    a2f0:	8e 10       	swpb	r14		
    a2f2:	8e 11       	sxt	r14		
    a2f4:	07 4e       	mov	r14,	r7	
    a2f6:	0e 48       	mov	r8,	r14	
    a2f8:	0f 49       	mov	r9,	r15	
    a2fa:	0e 86       	sub	r6,	r14	
    a2fc:	0f 77       	subc	r7,	r15	
    a2fe:	0f 11       	rra	r15		
    a300:	0e 10       	rrc	r14		
    a302:	3e 53       	add	#-1,	r14	;r3 As==11
    a304:	18 3c       	jmp	$+50     	;abs 0xa336
    a306:	04 4e       	mov	r14,	r4	
    a308:	14 53       	inc	r4		
    a30a:	0b 44       	mov	r4,	r11	
    a30c:	0b 5b       	rla	r11		
    a30e:	0b 5d       	add	r13,	r11	
    a310:	2f 4b       	mov	@r11,	r15	
    a312:	1f b3       	bit	#1,	r15	;r3 As==01
    a314:	10 20       	jnz	$+34     	;abs 0xa336
    a316:	0e 4f       	mov	r15,	r14	
    a318:	3e f0 fe ff 	and	#-2,	r14	;#0xfffe
    a31c:	3e 90 fe ff 	cmp	#-2,	r14	;#0xfffe
    a320:	05 24       	jz	$+12     	;abs 0xa32c
    a322:	12 c3       	clrc			
    a324:	0f 10       	rrc	r15		
    a326:	0f 54       	add	r4,	r15	
    a328:	0f 5f       	rla	r15		
    a32a:	02 3c       	jmp	$+6      	;abs 0xa330
    a32c:	3f 40 fe ff 	mov	#-2,	r15	;#0xfffe
    a330:	8d 4f 00 00 	mov	r15,	0(r13)	;0x0000(r13)
    a334:	c5 3f       	jmp	$-116    	;abs 0xa2c0
    a336:	0e 9c       	cmp	r12,	r14	
    a338:	1e 28       	jnc	$+62     	;abs 0xa376
    a33a:	45 93       	tst.b	r5		
    a33c:	08 24       	jz	$+18     	;abs 0xa34e
    a33e:	0f 4c       	mov	r12,	r15	
    a340:	1f 53       	inc	r15		
    a342:	0f 5f       	rla	r15		
    a344:	0f 5d       	add	r13,	r15	
    a346:	bf 40 fe ff 	mov	#-2,	0(r15)	;#0xfffe, 0x0000(r15)
    a34a:	00 00 
    a34c:	0d 3c       	jmp	$+28     	;abs 0xa368
    a34e:	0e 9c       	cmp	r12,	r14	
    a350:	0b 24       	jz	$+24     	;abs 0xa368
    a352:	0f 4c       	mov	r12,	r15	
    a354:	1f 53       	inc	r15		
    a356:	0f 5f       	rla	r15		
    a358:	0f 5d       	add	r13,	r15	
    a35a:	0b 4c       	mov	r12,	r11	
    a35c:	3b e3       	inv	r11		
    a35e:	0b 5e       	add	r14,	r11	
    a360:	8f 4b 00 00 	mov	r11,	0(r15)	;0x0000(r15)
    a364:	af 5f 00 00 	add	@r15,	0(r15)	;0x0000(r15)
    a368:	0c 5c       	rla	r12		
    a36a:	1c d3       	bis	#1,	r12	;r3 As==01
    a36c:	8d 4c 00 00 	mov	r12,	0(r13)	;0x0000(r13)
    a370:	0f 4d       	mov	r13,	r15	
    a372:	2f 53       	incd	r15		
    a374:	03 3c       	jmp	$+8      	;abs 0xa37c
    a376:	45 93       	tst.b	r5		
    a378:	a0 27       	jz	$-190    	;abs 0xa2ba
    a37a:	0f 43       	clr	r15		
    a37c:	34 41       	pop	r4		
    a37e:	35 41       	pop	r5		
    a380:	36 41       	pop	r6		
    a382:	37 41       	pop	r7		
    a384:	38 41       	pop	r8		
    a386:	39 41       	pop	r9		
    a388:	3a 41       	pop	r10		
    a38a:	3b 41       	pop	r11		
    a38c:	30 41       	ret			

0000a38e <free>:
    a38e:	bf f0 fe ff 	and	#-2,	-2(r15)	;#0xfffe, 0xfffe(r15)
    a392:	fe ff 
    a394:	30 41       	ret			

0000a396 <puts>:
    a396:	0b 12       	push	r11		
    a398:	0b 4f       	mov	r15,	r11	
    a39a:	6f 4b       	mov.b	@r11,	r15	
    a39c:	4f 93       	tst.b	r15		
    a39e:	06 24       	jz	$+14     	;abs 0xa3ac
    a3a0:	1b 53       	inc	r11		
    a3a2:	8f 11       	sxt	r15		
    a3a4:	b0 12 50 a2 	call	#0xa250	
    a3a8:	0f 93       	tst	r15		
    a3aa:	f7 37       	jge	$-16     	;abs 0xa39a
    a3ac:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    a3b0:	05 20       	jnz	$+12     	;abs 0xa3bc
    a3b2:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    a3b6:	b0 12 50 a2 	call	#0xa250	
    a3ba:	01 3c       	jmp	$+4      	;abs 0xa3be
    a3bc:	3f 43       	mov	#-1,	r15	;r3 As==11
    a3be:	3b 41       	pop	r11		
    a3c0:	30 41       	ret			

0000a3c2 <_unexpected_>:
    a3c2:	00 13       	reti			

0000a3c4 <__stop_progExec__>:
    a3c4:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    a3c8:	fd 3f       	jmp	$-4      	;abs 0xa3c4

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	70 a0 70 a0 70 a0 70 a0 70 a0 70 a0 70 a0 70 a0     p.p.p.p.p.p.p.p.
    fff0:	70 a0 70 a0 70 a0 70 a0 70 a0 70 a0 70 a0 00 a0     p.p.p.p.p.p.p...
