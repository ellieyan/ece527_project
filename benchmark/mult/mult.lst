
mult.elf:     file format elf32-msp430

SYMBOL TABLE:
0000a000 l    d  .text	00000000 .text
00000200 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000160c l    d  .noinit.crt0	00000000 .noinit.crt0
00000000 l    df *ABS*	00000000 mult.c
0000a088 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 omsp_func.c
00000202 g     O .bss	00000004 Microseconds
0000a114 g     F .text	00000032 putchar
00000000 g       *ABS*	00000000 __data_size
0000a088  w      .text	00000000 __isr_14
00000206 g     O .bss	00000004 Dhrystones_Per_Second
0000a088  w      .text	00000000 __isr_4
00000138 g       *ABS*	00000000 __OP2
0000020a g     O .bss	00000004 User_Time
0000020e g     O .bss	00000004 Begin_Time
0000a0e6 g     F .text	0000002e domult_int
00000130 g       *ABS*	00000000 __MPY
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
0000a1c4 g       *ABS*	00000000 _etext
0000140c g       *ABS*	00000000 __bss_size
0000a000  w      .text	00000000 __watchdog_support
0000a1be  w      .text	00000000 __stop_progExec__
0000a088  w      .text	00000000 __isr_11
0000a17c g       .text	00000000 __xabi_muldi3
00000212 g     O .bss	00001388 Arr_2_Glob
0000a088  w      .text	00000000 __isr_5
0000a1c4 g       *ABS*	00000000 __data_load_start
0000a088 g       .text	00000000 __dtors_end
0000a088  w      .text	00000000 __isr_2
0000159a g     O .bss	00000004 End_Time
0000a088  w      .text	00000000 __isr_10
0000159e g     O .bss	00000002 Next_Ptr_Glob
0000013c g       *ABS*	00000000 __RESHI
0000160c g     O .noinit.crt0	00000002 __wdt_clear_value
0000a088  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000a088  w      .text	00000000 __isr_0
0000a028  w      .text	00000000 __do_clear_bss
00000200 g     O .bss	00000002 Reg
000015a0 g     O .bss	00000002 Int_Glob
000015a2 g     O .bss	00000001 Ch_1_Glob
0000a1bc  w      .text	00000000 _unexpected_
0000a088  w      .text	00000000 __isr_8
000015a3 g     O .bss	00000001 Ch_2_Glob
0000a088  w      .text	00000000 __isr_3
000015a4 g     O .bss	00000002 Ptr_Glob
0000a000  w      .text	00000000 _reset_vector__
0000a088 g       .text	00000000 __ctors_start
0000a088  w      .text	00000000 __isr_12
0000a010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000a03e g     F .text	0000004a main
0000a088  w      .text	00000000 __isr_13
00010000 g       .vectors	00000000 _vectors_end
0000a088  w      .text	00000000 __isr_9
0000a00c  w      .text	00000000 __init_stack
0000a088 g       .text	00000000 __dtors_start
0000a088  w      .text	00000000 __isr_6
0000a088 g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
00004200 g       *ABS*	00000000 __stack
0000a088  w      .text	00000000 __isr_1
00000200 g       .text	00000000 _edata
0000160c g       .bss	00000000 _end
000015a6 g     O .bss	00000064 Arr_1_Glob
00000134 g       *ABS*	00000000 __MAC
0000a1be  w      .text	00000000 _endless_loop__
0000a146 g       .text	00000000 __muldi3
0000a010  w      .text	00000000 __low_level_init
0000160a g     O .bss	00000002 Bool_Glob
00000200 g       .text	00000000 __data_start
00000120 g       *ABS*	00000000 __WDTCTL
0000a08c g     F .text	0000005a domult
0000013e g       *ABS*	00000000 __SUMEXT



Disassembly of section .text:

0000a000 <__watchdog_support>:
    a000:	55 42 20 01 	mov.b	&0x0120,r5	
    a004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    a008:	82 45 0c 16 	mov	r5,	&0x160c	

0000a00c <__init_stack>:
    a00c:	31 40 00 42 	mov	#16896,	r1	;#0x4200

0000a010 <__do_copy_data>:
    a010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    a014:	0f 93       	tst	r15		
    a016:	08 24       	jz	$+18     	;abs 0xa028
    a018:	92 42 0c 16 	mov	&0x160c,&0x0120	
    a01c:	20 01 
    a01e:	2f 83       	decd	r15		
    a020:	9f 4f c4 a1 	mov	-24124(r15),512(r15);0xa1c4(r15), 0x0200(r15)
    a024:	00 02 
    a026:	f8 23       	jnz	$-14     	;abs 0xa018

0000a028 <__do_clear_bss>:
    a028:	3f 40 0c 14 	mov	#5132,	r15	;#0x140c
    a02c:	0f 93       	tst	r15		
    a02e:	07 24       	jz	$+16     	;abs 0xa03e
    a030:	92 42 0c 16 	mov	&0x160c,&0x0120	
    a034:	20 01 
    a036:	1f 83       	dec	r15		
    a038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    a03c:	f9 23       	jnz	$-12     	;abs 0xa030

0000a03e <main>:
int domult_int (int a, int b) {return a* b;}

int main ()
/*****/

{
    a03e:	04 41       	mov	r1,	r4	
    a040:	24 53       	incd	r4		
    a042:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
  STOP_WATCHDOG;
    a046:	3f 40 20 01 	mov	#288,	r15	;#0x0120
    a04a:	bf 40 80 5a 	mov	#23168,	0(r15)	;#0x5a80, 0x0000(r15)
    a04e:	00 00 
  START_TIME;  // Set P3[0]
    a050:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    a054:	df 43 00 00 	mov.b	#1,	0(r15)	;r3 As==01, 0x0000(r15)
//   unsigned long A = 1099013;
//   unsigned long B = 19307;
//   unsigned long long C = domult(A, B);

   //int a = 44365;
   int a = 109901;
    a058:	b4 40 4d ad 	mov	#-21171,-8(r4)	;#0xad4d, 0xfff8(r4)
    a05c:	f8 ff 
   int b = 19300;
    a05e:	b4 40 64 4b 	mov	#19300,	-6(r4)	;#0x4b64, 0xfffa(r4)
    a062:	fa ff 
   int c = domult_int (a, b); // this one excites a longer path
    a064:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    a068:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    a06c:	b0 12 e6 a0 	call	#0xa0e6	
    a070:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
   //int c = a*b; // this one excites a longer path


  END_TIME;  // Clear P3[0]
    a074:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    a078:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
  //printf("a is %d, b is %d, and c is %d \n", a, b, c);
  //printf("a is %lu  and b is %lu  and c is %llu \n", A, B, C);
  DHRYSTONE_DONE;
    a07c:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    a080:	df 43 00 00 	mov.b	#1,	0(r15)	;r3 As==01, 0x0000(r15)
}
    a084:	31 50 06 00 	add	#6,	r1	;#0x0006

0000a088 <__ctors_end>:
    a088:	30 40 bc a1 	br	#0xa1bc	

0000a08c <domult>:
float           Microseconds,
                Dhrystones_Per_Second;

/// CHECK IF YOU CAN IMPLEMENT THE HORNER's METHOD IN TI's DOCS

unsigned long long domult (unsigned int a, unsigned int b) {return (unsigned long long) a* b;}
    a08c:	0b 12       	push	r11		
    a08e:	0a 12       	push	r10		
    a090:	09 12       	push	r9		
    a092:	08 12       	push	r8		
    a094:	07 12       	push	r7		
    a096:	06 12       	push	r6		
    a098:	04 12       	push	r4		
    a09a:	04 41       	mov	r1,	r4	
    a09c:	34 50 0e 00 	add	#14,	r4	;#0x000e
    a0a0:	21 82       	sub	#4,	r1	;r2 As==10
    a0a2:	84 4f ee ff 	mov	r15,	-18(r4)	;0xffee(r4)
    a0a6:	84 4e f0 ff 	mov	r14,	-16(r4)	;0xfff0(r4)
    a0aa:	1a 44 ee ff 	mov	-18(r4),r10	;0xffee(r4)
    a0ae:	0b 43       	clr	r11		
    a0b0:	0c 43       	clr	r12		
    a0b2:	0d 43       	clr	r13		
    a0b4:	16 44 f0 ff 	mov	-16(r4),r6	;0xfff0(r4)
    a0b8:	07 43       	clr	r7		
    a0ba:	08 43       	clr	r8		
    a0bc:	09 43       	clr	r9		
    a0be:	09 12       	push	r9		
    a0c0:	08 12       	push	r8		
    a0c2:	07 12       	push	r7		
    a0c4:	06 12       	push	r6		
    a0c6:	0f 4d       	mov	r13,	r15	
    a0c8:	0e 4c       	mov	r12,	r14	
    a0ca:	0d 4b       	mov	r11,	r13	
    a0cc:	0c 4a       	mov	r10,	r12	
    a0ce:	b0 12 46 a1 	call	#0xa146	
    a0d2:	31 52       	add	#8,	r1	;r2 As==11
    a0d4:	21 52       	add	#4,	r1	;r2 As==10
    a0d6:	34 41       	pop	r4		
    a0d8:	36 41       	pop	r6		
    a0da:	37 41       	pop	r7		
    a0dc:	38 41       	pop	r8		
    a0de:	39 41       	pop	r9		
    a0e0:	3a 41       	pop	r10		
    a0e2:	3b 41       	pop	r11		
    a0e4:	30 41       	ret			

0000a0e6 <domult_int>:

int domult_int (int a, int b) {return a* b;}
    a0e6:	04 12       	push	r4		
    a0e8:	04 41       	mov	r1,	r4	
    a0ea:	24 53       	incd	r4		
    a0ec:	21 82       	sub	#4,	r1	;r2 As==10
    a0ee:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a0f2:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    a0f6:	02 12       	push	r2		
    a0f8:	32 c2       	dint			
    a0fa:	03 43       	nop			
    a0fc:	92 44 fa ff 	mov	-6(r4),	&0x0132	;0xfffa(r4)
    a100:	32 01 
    a102:	92 44 fc ff 	mov	-4(r4),	&0x0138	;0xfffc(r4)
    a106:	38 01 
    a108:	1f 42 3a 01 	mov	&0x013a,r15	
    a10c:	32 41       	pop	r2		
    a10e:	21 52       	add	#4,	r1	;r2 As==10
    a110:	34 41       	pop	r4		
    a112:	30 41       	ret			

0000a114 <putchar>:

//--------------------------------------------------//
//                 putChar function                 //
//            (Send a byte to the Port-1)           //
//--------------------------------------------------//
int putchar (int txdata) {
    a114:	04 12       	push	r4		
    a116:	04 41       	mov	r1,	r4	
    a118:	24 53       	incd	r4		
    a11a:	21 83       	decd	r1		
    a11c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)

  // Write the output character to the Port-1
  P1OUT  = txdata;
    a120:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    a124:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    a128:	4e 4e       	mov.b	r14,	r14	
    a12a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

  // Toggle Port-2[0] to signal new byte
  P2OUT ^= 0x01;
    a12e:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    a132:	3e 40 29 00 	mov	#41,	r14	;#0x0029
    a136:	6e 4e       	mov.b	@r14,	r14	
    a138:	5e e3       	xor.b	#1,	r14	;r3 As==01
    a13a:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)

  return 0;
    a13e:	0f 43       	clr	r15		
}
    a140:	21 53       	incd	r1		
    a142:	34 41       	pop	r4		
    a144:	30 41       	ret			

0000a146 <__muldi3>:
    a146:	0b 12       	push	r11		
    a148:	0a 12       	push	r10		
    a14a:	09 12       	push	r9		
    a14c:	08 12       	push	r8		
    a14e:	07 12       	push	r7		
    a150:	06 12       	push	r6		
    a152:	05 12       	push	r5		
    a154:	04 12       	push	r4		
    a156:	18 41 12 00 	mov	18(r1),	r8	;0x0012(r1)
    a15a:	19 41 14 00 	mov	20(r1),	r9	;0x0014(r1)
    a15e:	1a 41 16 00 	mov	22(r1),	r10	;0x0016(r1)
    a162:	1b 41 18 00 	mov	24(r1),	r11	;0x0018(r1)
    a166:	b0 12 7c a1 	call	#0xa17c	
    a16a:	34 41       	pop	r4		
    a16c:	35 41       	pop	r5		
    a16e:	36 41       	pop	r6		
    a170:	37 41       	pop	r7		
    a172:	38 41       	pop	r8		
    a174:	39 41       	pop	r9		
    a176:	3a 41       	pop	r10		
    a178:	3b 41       	pop	r11		
    a17a:	30 41       	ret			

0000a17c <__xabi_muldi3>:
    a17c:	04 43       	clr	r4		
    a17e:	05 43       	clr	r5		
    a180:	06 43       	clr	r6		
    a182:	07 43       	clr	r7		
    a184:	0e 3c       	jmp	$+30     	;abs 0xa1a2
    a186:	12 c3       	clrc			
    a188:	0b 10       	rrc	r11		
    a18a:	0a 10       	rrc	r10		
    a18c:	09 10       	rrc	r9		
    a18e:	08 10       	rrc	r8		
    a190:	04 28       	jnc	$+10     	;abs 0xa19a
    a192:	04 5c       	add	r12,	r4	
    a194:	05 6d       	addc	r13,	r5	
    a196:	06 6e       	addc	r14,	r6	
    a198:	07 6f       	addc	r15,	r7	
    a19a:	0c 5c       	rla	r12		
    a19c:	0d 6d       	rlc	r13		
    a19e:	0e 6e       	rlc	r14		
    a1a0:	0f 6f       	rlc	r15		
    a1a2:	08 93       	tst	r8		
    a1a4:	f0 23       	jnz	$-30     	;abs 0xa186
    a1a6:	09 93       	tst	r9		
    a1a8:	ee 23       	jnz	$-34     	;abs 0xa186
    a1aa:	0a 93       	tst	r10		
    a1ac:	ec 23       	jnz	$-38     	;abs 0xa186
    a1ae:	0b 93       	tst	r11		
    a1b0:	ea 23       	jnz	$-42     	;abs 0xa186
    a1b2:	0c 44       	mov	r4,	r12	
    a1b4:	0d 45       	mov	r5,	r13	
    a1b6:	0e 46       	mov	r6,	r14	
    a1b8:	0f 47       	mov	r7,	r15	
    a1ba:	30 41       	ret			

0000a1bc <_unexpected_>:
    a1bc:	00 13       	reti			

0000a1be <__stop_progExec__>:
    a1be:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    a1c2:	fd 3f       	jmp	$-4      	;abs 0xa1be

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	88 a0 88 a0 88 a0 88 a0 88 a0 88 a0 88 a0 88 a0     ................
    fff0:	88 a0 88 a0 88 a0 88 a0 88 a0 88 a0 88 a0 00 a0     ................
