
binSearch.elf:     file format elf32-msp430

SYMBOL TABLE:
0000a000 l    d  .text	00000000 .text
0000ab80 l    d  .rodata	00000000 .rodata
00000200 l    d  .data	00000000 .data
00000222 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0000162e l    d  .noinit.crt0	00000000 .noinit.crt0
00000000 l    df *ABS*	00000000 binSearch.c
0000a06a l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 omsp_func.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vuprintf.c
0000a1c0 l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
00000224 g     O .bss	00000004 Microseconds
0000a196 g     F .text	0000000c putchar
00000022 g       *ABS*	00000000 __data_size
0000a06a  w      .text	00000000 __isr_14
00000228 g     O .bss	00000004 Dhrystones_Per_Second
0000a1a2 g     F .text	00000010 printf
0000a06a  w      .text	00000000 __isr_4
00000138 g       *ABS*	00000000 __OP2
0000022c g     O .bss	00000004 User_Time
00000230 g     O .bss	00000004 Begin_Time
0000aa26 g     F .text	00000000 __udivhi3
00000130 g       *ABS*	00000000 __MPY
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
0000abba g       *ABS*	00000000 _etext
0000a09e g     F .text	00000088 bsearch
0000140c g       *ABS*	00000000 __bss_size
0000a000  w      .text	00000000 __watchdog_support
0000ab7a  w      .text	00000000 __stop_progExec__
0000a9f6 g     F .text	0000002c puts
0000a06a  w      .text	00000000 __isr_11
0000a08a g     F .text	00000014 assert
0000aa48 g     F .text	00000000 __udivsi3
0000a06e g     F .text	0000001c cmpObject
0000ab3a g       .text	00000000 __udivmoddi4
00000234 g     O .bss	00001388 Arr_2_Glob
0000a06a  w      .text	00000000 __isr_5
0000ab0c g     F .text	00000000 __umoddi3
0000abba g       *ABS*	00000000 __data_load_start
0000a06a g       .text	00000000 __dtors_end
0000aae6 g     F .text	00000000 __udivdi3
0000a06a  w      .text	00000000 __isr_2
000015bc g     O .bss	00000004 End_Time
0000a06a  w      .text	00000000 __isr_10
000015c0 g     O .bss	00000002 Next_Ptr_Glob
0000013c g       *ABS*	00000000 __RESHI
0000162e g     O .noinit.crt0	00000002 __wdt_clear_value
0000a06a  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000aa7e g     F .text	00000000 __umodsi3
0000a1b2 g     F .text	0000000e vprintf
0000aa40 g     F .text	00000000 __umodhi3
0000a06a  w      .text	00000000 __isr_0
0000a028  w      .text	00000000 __do_clear_bss
00000222 g     O .bss	00000002 Reg
0000a126 g     F .text	00000070 run_bm
000015c2 g     O .bss	00000002 Int_Glob
0000aa48 g       .text	00000000 __ext_udivmod32
000015c4 g     O .bss	00000001 Ch_1_Glob
0000ab78  w      .text	00000000 _unexpected_
0000a06a  w      .text	00000000 __isr_8
000015c5 g     O .bss	00000001 Ch_2_Glob
0000a06a  w      .text	00000000 __isr_3
0000a358 g     F .text	0000069e vuprintf
000015c6 g     O .bss	00000002 Ptr_Glob
0000aa26 g       .text	00000000 __ext_udivmod16
0000a000  w      .text	00000000 _reset_vector__
0000a06a g       .text	00000000 __ctors_start
0000aa88 g       .text	00000000 __xabi_udivmod64
0000a06a  w      .text	00000000 __isr_12
0000a010  w      .text	00000000 __do_copy_data
00000222 g       .bss	00000000 __bss_start
0000a03e g     F .text	0000002c main
0000a06a  w      .text	00000000 __isr_13
00010000 g       .vectors	00000000 _vectors_end
0000a06a  w      .text	00000000 __isr_9
0000a00c  w      .text	00000000 __init_stack
0000a06a g       .text	00000000 __dtors_start
0000a06a  w      .text	00000000 __isr_6
0000a06a g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
00004200 g       *ABS*	00000000 __stack
0000a06a  w      .text	00000000 __isr_1
00000222 g       .data	00000000 _edata
0000162e g       .bss	00000000 _end
0000aa22 g       .text	00000000 exit
00000200 g     O .data	00000022 a
000015c8 g     O .bss	00000064 Arr_1_Glob
00000134 g       *ABS*	00000000 __MAC
0000ab7a  w      .text	00000000 _endless_loop__
0000a010  w      .text	00000000 __low_level_init
0000162c g     O .bss	00000002 Bool_Glob
00000200 g       .data	00000000 __data_start
00000120 g       *ABS*	00000000 __WDTCTL
0000013e g       *ABS*	00000000 __SUMEXT



Disassembly of section .text:

0000a000 <__watchdog_support>:
    a000:	55 42 20 01 	mov.b	&0x0120,r5	
    a004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    a008:	82 45 2e 16 	mov	r5,	&0x162e	

0000a00c <__init_stack>:
    a00c:	31 40 00 42 	mov	#16896,	r1	;#0x4200

0000a010 <__do_copy_data>:
    a010:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    a014:	0f 93       	tst	r15		
    a016:	08 24       	jz	$+18     	;abs 0xa028
    a018:	92 42 2e 16 	mov	&0x162e,&0x0120	
    a01c:	20 01 
    a01e:	2f 83       	decd	r15		
    a020:	9f 4f ba ab 	mov	-21574(r15),512(r15);0xabba(r15), 0x0200(r15)
    a024:	00 02 
    a026:	f8 23       	jnz	$-14     	;abs 0xa018

0000a028 <__do_clear_bss>:
    a028:	3f 40 0c 14 	mov	#5132,	r15	;#0x140c
    a02c:	0f 93       	tst	r15		
    a02e:	07 24       	jz	$+16     	;abs 0xa03e
    a030:	92 42 2e 16 	mov	&0x162e,&0x0120	
    a034:	20 01 
    a036:	1f 83       	dec	r15		
    a038:	cf 43 22 02 	mov.b	#0,	546(r15);r3 As==00, 0x0222(r15)
    a03c:	f9 23       	jnz	$-12     	;abs 0xa030

0000a03e <main>:

int main ()
/*****/

{
  STOP_WATCHDOG;
    a03e:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a042:	20 01 
  printf ("Execution starts" );
    a044:	30 12 92 ab 	push	#-21614	;#0xab92
    a048:	b0 12 a2 a1 	call	#0xa1a2	
    a04c:	21 53       	incd	r1		
  START_TIME;  // Set P3[0]
    a04e:	3b 40 19 00 	mov	#25,	r11	;#0x0019
    a052:	db 43 00 00 	mov.b	#1,	0(r11)	;r3 As==01, 0x0000(r11)

  run_bm();
    a056:	b0 12 26 a1 	call	#0xa126	

  END_TIME;  // Clear P3[0]
    a05a:	cb 43 00 00 	mov.b	#0,	0(r11)	;r3 As==00, 0x0000(r11)
  printf ("Execution ends\n");
    a05e:	3f 40 a3 ab 	mov	#-21597,r15	;#0xaba3
    a062:	b0 12 f6 a9 	call	#0xa9f6	
  DHRYSTONE_DONE;
    a066:	d2 43 1d 00 	mov.b	#1,	&0x001d	;r3 As==01

0000a06a <__ctors_end>:
    a06a:	30 40 78 ab 	br	#0xab78	

0000a06e <cmpObject>:
  }
}

int cmpObject(Object* pa, Object *pb)
{
  Object a = *pa;
    a06e:	2f 4f       	mov	@r15,	r15	
  Object b = *pb;
    a070:	2e 4e       	mov	@r14,	r14	
  if (a < b) return -1;
    a072:	0f 9e       	cmp	r14,	r15	
    a074:	04 38       	jl	$+10     	;abs 0xa07e
  if (a == b) return 0;
    a076:	05 24       	jz	$+12     	;abs 0xa082
  if (a > b) return 1;
    a078:	0e 9f       	cmp	r15,	r14	
    a07a:	05 38       	jl	$+12     	;abs 0xa086
    a07c:	30 41       	ret			

int cmpObject(Object* pa, Object *pb)
{
  Object a = *pa;
  Object b = *pb;
  if (a < b) return -1;
    a07e:	3f 43       	mov	#-1,	r15	;r3 As==11
    a080:	30 41       	ret			
  if (a == b) return 0;
    a082:	0f 43       	clr	r15		
    a084:	30 41       	ret			
  if (a > b) return 1;
    a086:	1f 43       	mov	#1,	r15	;r3 As==01
  //assert(0);
}
    a088:	30 41       	ret			

0000a08a <assert>:

Object a[] = {1, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65534};

void assert(int value)
{
  if (!value)
    a08a:	0f 93       	tst	r15		
    a08c:	01 24       	jz	$+4      	;abs 0xa090
    a08e:	30 41       	ret			
  {
    printf("Assertion FAILED \n");
    a090:	3f 40 80 ab 	mov	#-21632,r15	;#0xab80
    a094:	b0 12 f6 a9 	call	#0xa9f6	
    exit(0);
    a098:	0f 43       	clr	r15		
    a09a:	b0 12 22 aa 	call	#0xaa22	

0000a09e <bsearch>:
}

int bsearch(Object Array[], int n, Object *KeyPtr,
    int (*cmp)(Object *, Object *),
    int NotFound)
{
    a09e:	0b 12       	push	r11		
    a0a0:	0a 12       	push	r10		
    a0a2:	09 12       	push	r9		
    a0a4:	08 12       	push	r8		
    a0a6:	07 12       	push	r7		
    a0a8:	06 12       	push	r6		
    a0aa:	05 12       	push	r5		
    a0ac:	08 4f       	mov	r15,	r8	
    a0ae:	07 4d       	mov	r13,	r7	
    a0b0:	06 4c       	mov	r12,	r6	
    a0b2:	15 41 10 00 	mov	16(r1),	r5	;0x0010(r1)

  //printf("Search starts \n");
  unsigned left = 1, right = n; /* `unsigned' to avoid overflow in `(left + right)/2' */

  if ( ! (Array && n > 0 && KeyPtr && cmp))
    a0b6:	0f 93       	tst	r15		
    a0b8:	2b 24       	jz	$+88     	;abs 0xa110
    a0ba:	1e 93       	cmp	#1,	r14	;r3 As==01
    a0bc:	29 38       	jl	$+84     	;abs 0xa110
    a0be:	0d 93       	tst	r13		
    a0c0:	27 24       	jz	$+80     	;abs 0xa110
    a0c2:	0c 93       	tst	r12		
    a0c4:	25 24       	jz	$+76     	;abs 0xa110
    int (*cmp)(Object *, Object *),
    int NotFound)
{

  //printf("Search starts \n");
  unsigned left = 1, right = n; /* `unsigned' to avoid overflow in `(left + right)/2' */
    a0c6:	0a 4e       	mov	r14,	r10	

  if ( ! (Array && n > 0 && KeyPtr && cmp))
    return NotFound; /* invalid input or empty array */

  while (left < right)
    a0c8:	1e 93       	cmp	#1,	r14	;r3 As==01
    a0ca:	19 24       	jz	$+52     	;abs 0xa0fe
    a0cc:	19 43       	mov	#1,	r9	;r3 As==01
    a0ce:	08 3c       	jmp	$+18     	;abs 0xa0e0
    if (cmp(Array + m, KeyPtr) < 0)
      left = m + 1;
    else
    {
      /* assert(right != m) or infinite loop possible */
      assert(right !=m );
    a0d0:	1f 43       	mov	#1,	r15	;r3 As==01
    a0d2:	0a 9b       	cmp	r11,	r10	
    a0d4:	26 24       	jz	$+78     	;abs 0xa122
    a0d6:	b0 12 8a a0 	call	#0xa08a	
      right = m;          /* a[left] <= *KeyPtr <= a[m] or *KeyPtr not in Array */
    a0da:	0a 4b       	mov	r11,	r10	
  unsigned left = 1, right = n; /* `unsigned' to avoid overflow in `(left + right)/2' */

  if ( ! (Array && n > 0 && KeyPtr && cmp))
    return NotFound; /* invalid input or empty array */

  while (left < right)
    a0dc:	09 9a       	cmp	r10,	r9	
    a0de:	0f 2c       	jc	$+32     	;abs 0xa0fe
  {
    unsigned m = (left  +  right) / 2;
    a0e0:	0b 4a       	mov	r10,	r11	
    a0e2:	0b 59       	add	r9,	r11	
    a0e4:	12 c3       	clrc			
    a0e6:	0b 10       	rrc	r11		

    if (cmp(Array + m, KeyPtr) < 0)
    a0e8:	0f 4b       	mov	r11,	r15	
    a0ea:	0f 5f       	rla	r15		
    a0ec:	0e 47       	mov	r7,	r14	
    a0ee:	0f 58       	add	r8,	r15	
    a0f0:	86 12       	call	r6		
    a0f2:	0f 93       	tst	r15		
    a0f4:	ed 37       	jge	$-36     	;abs 0xa0d0
      left = m + 1;
    a0f6:	09 4b       	mov	r11,	r9	
    a0f8:	19 53       	inc	r9		
  unsigned left = 1, right = n; /* `unsigned' to avoid overflow in `(left + right)/2' */

  if ( ! (Array && n > 0 && KeyPtr && cmp))
    return NotFound; /* invalid input or empty array */

  while (left < right)
    a0fa:	09 9a       	cmp	r10,	r9	
    a0fc:	f1 2b       	jnc	$-28     	;abs 0xa0e0
      right = m;          /* a[left] <= *KeyPtr <= a[m] or *KeyPtr not in Array */
    }
  }
  /* assert(left == right) */
  //printf("Search end \n");
  return (cmp(Array + right, KeyPtr) == 0) ? right : NotFound;
    a0fe:	0d 4a       	mov	r10,	r13	
    a100:	0d 5d       	rla	r13		
    a102:	0e 47       	mov	r7,	r14	
    a104:	0f 48       	mov	r8,	r15	
    a106:	0f 5d       	add	r13,	r15	
    a108:	86 12       	call	r6		
    a10a:	0f 93       	tst	r15		
    a10c:	01 20       	jnz	$+4      	;abs 0xa110
    a10e:	05 4a       	mov	r10,	r5	
}
    a110:	0f 45       	mov	r5,	r15	
    a112:	35 41       	pop	r5		
    a114:	36 41       	pop	r6		
    a116:	37 41       	pop	r7		
    a118:	38 41       	pop	r8		
    a11a:	39 41       	pop	r9		
    a11c:	3a 41       	pop	r10		
    a11e:	3b 41       	pop	r11		
    a120:	30 41       	ret			
    if (cmp(Array + m, KeyPtr) < 0)
      left = m + 1;
    else
    {
      /* assert(right != m) or infinite loop possible */
      assert(right !=m );
    a122:	0f 43       	clr	r15		
    a124:	d8 3f       	jmp	$-78     	;abs 0xa0d6

0000a126 <run_bm>:
  //printf("Search end \n");
  return (cmp(Array + right, KeyPtr) == 0) ? right : NotFound;
}

void run_bm()
{
    a126:	21 83       	decd	r1		

  int n = sizeof(a)/sizeof(*a) - 1;
  const int NotFound = -1;

  /* key not in Array */
  Object key = 0;
    a128:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
  int index = bsearch(a, n, &key, cmpObject, NotFound);
    a12c:	33 12       	push	#-1		;r3 As==11
    a12e:	3c 40 6e a0 	mov	#-24466,r12	;#0xa06e
    a132:	0d 41       	mov	r1,	r13	
    a134:	2d 53       	incd	r13		
    a136:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a13a:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    a13e:	b0 12 9e a0 	call	#0xa09e	
  //printf("%d \n", index);

  key = 65535;
    a142:	b1 43 02 00 	mov	#-1,	2(r1)	;r3 As==11, 0x0002(r1)
  index = bsearch(a, n, &key, cmpObject, NotFound);
    a146:	b1 43 00 00 	mov	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    a14a:	3c 40 6e a0 	mov	#-24466,r12	;#0xa06e
    a14e:	0d 41       	mov	r1,	r13	
    a150:	2d 53       	incd	r13		
    a152:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a156:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    a15a:	b0 12 9e a0 	call	#0xa09e	
  //printf("%d \n", index);

  // Key in ARRAY
  key = 255;
    a15e:	b1 40 ff 00 	mov	#255,	2(r1)	;#0x00ff, 0x0002(r1)
    a162:	02 00 
  index = bsearch(a, n, &key, cmpObject, NotFound);
    a164:	b1 43 00 00 	mov	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    a168:	3c 40 6e a0 	mov	#-24466,r12	;#0xa06e
    a16c:	0d 41       	mov	r1,	r13	
    a16e:	2d 53       	incd	r13		
    a170:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a174:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    a178:	b0 12 9e a0 	call	#0xa09e	
  //printf("%d \n", index);

  index = bsearch(a, n, NULL, cmpObject, NotFound);
    a17c:	b1 43 00 00 	mov	#-1,	0(r1)	;r3 As==11, 0x0000(r1)
    a180:	3c 40 6e a0 	mov	#-24466,r12	;#0xa06e
    a184:	0d 43       	clr	r13		
    a186:	3e 40 10 00 	mov	#16,	r14	;#0x0010
    a18a:	3f 40 00 02 	mov	#512,	r15	;#0x0200
    a18e:	b0 12 9e a0 	call	#0xa09e	
  // Long array coverage// not part of binSearching
  int a = 1;
  int b = 32767;
  int c = a + b;

}
    a192:	21 52       	add	#4,	r1	;r2 As==10
    a194:	30 41       	ret			

0000a196 <putchar>:
//            (Send a byte to the Port-1)           //
//--------------------------------------------------//
int putchar (int txdata) {

  // Write the output character to the Port-1
  P1OUT  = txdata;
    a196:	c2 4f 21 00 	mov.b	r15,	&0x0021	

  // Toggle Port-2[0] to signal new byte
  P2OUT ^= 0x01;
    a19a:	d2 e3 29 00 	xor.b	#1,	&0x0029	;r3 As==01

  return 0;
}
    a19e:	0f 43       	clr	r15		
    a1a0:	30 41       	ret			

0000a1a2 <printf>:
    a1a2:	0d 41       	mov	r1,	r13	
    a1a4:	2d 53       	incd	r13		
    a1a6:	3e 4d       	mov	@r13+,	r14	
    a1a8:	3f 40 96 a1 	mov	#-24170,r15	;#0xa196
    a1ac:	b0 12 58 a3 	call	#0xa358	
    a1b0:	30 41       	ret			

0000a1b2 <vprintf>:
    a1b2:	0d 4e       	mov	r14,	r13	
    a1b4:	0e 4f       	mov	r15,	r14	
    a1b6:	3f 40 96 a1 	mov	#-24170,r15	;#0xa196
    a1ba:	b0 12 58 a3 	call	#0xa358	
    a1be:	30 41       	ret			

0000a1c0 <print_field>:
    a1c0:	0b 12       	push	r11		
    a1c2:	0a 12       	push	r10		
    a1c4:	09 12       	push	r9		
    a1c6:	08 12       	push	r8		
    a1c8:	07 12       	push	r7		
    a1ca:	06 12       	push	r6		
    a1cc:	05 12       	push	r5		
    a1ce:	04 12       	push	r4		
    a1d0:	31 82       	sub	#8,	r1	;r2 As==11
    a1d2:	08 4f       	mov	r15,	r8	
    a1d4:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a1d8:	09 4d       	mov	r13,	r9	
    a1da:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    a1de:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    a1e2:	4c 4d       	mov.b	r13,	r12	
    a1e4:	04 4d       	mov	r13,	r4	
    a1e6:	84 10       	swpb	r4		
    a1e8:	45 44       	mov.b	r4,	r5	
    a1ea:	4e 4f       	mov.b	r15,	r14	
    a1ec:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    a1f0:	11 24       	jz	$+36     	;abs 0xa214
    a1f2:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a1f6:	00 00 
    a1f8:	0e 4f       	mov	r15,	r14	
    a1fa:	8e 10       	swpb	r14		
    a1fc:	5e f3       	and.b	#1,	r14	;r3 As==01
    a1fe:	03 24       	jz	$+8      	;abs 0xa206
    a200:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    a204:	02 3c       	jmp	$+6      	;abs 0xa20a
    a206:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    a20a:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    a20e:	0c 41       	mov	r1,	r12	
    a210:	2c 53       	incd	r12		
    a212:	0f 3c       	jmp	$+32     	;abs 0xa232
    a214:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    a218:	04 24       	jz	$+10     	;abs 0xa222
    a21a:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a21e:	00 00 
    a220:	04 3c       	jmp	$+10     	;abs 0xa22a
    a222:	4c 93       	tst.b	r12		
    a224:	05 24       	jz	$+12     	;abs 0xa230
    a226:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    a22a:	0c 41       	mov	r1,	r12	
    a22c:	1c 53       	inc	r12		
    a22e:	01 3c       	jmp	$+4      	;abs 0xa232
    a230:	0c 41       	mov	r1,	r12	
    a232:	0a 4c       	mov	r12,	r10	
    a234:	8c 10       	swpb	r12		
    a236:	8c 11       	sxt	r12		
    a238:	8c 10       	swpb	r12		
    a23a:	8c 11       	sxt	r12		
    a23c:	0b 4c       	mov	r12,	r11	
    a23e:	06 41       	mov	r1,	r6	
    a240:	0c 41       	mov	r1,	r12	
    a242:	8c 10       	swpb	r12		
    a244:	8c 11       	sxt	r12		
    a246:	8c 10       	swpb	r12		
    a248:	8c 11       	sxt	r12		
    a24a:	07 4c       	mov	r12,	r7	
    a24c:	0a 86       	sub	r6,	r10	
    a24e:	0b 77       	subc	r7,	r11	
    a250:	0e 4f       	mov	r15,	r14	
    a252:	8e 10       	swpb	r14		
    a254:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    a258:	6e f2       	and.b	#4,	r14	;r2 As==10
    a25a:	02 24       	jz	$+6      	;abs 0xa260
    a25c:	07 45       	mov	r5,	r7	
    a25e:	01 3c       	jmp	$+4      	;abs 0xa262
    a260:	37 43       	mov	#-1,	r7	;r3 As==11
    a262:	4f 4f       	mov.b	r15,	r15	
    a264:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    a268:	3c 20       	jnz	$+122    	;abs 0xa2e2
    a26a:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    a26e:	3d 53       	add	#-1,	r13	;r3 As==11
    a270:	1d 53       	inc	r13		
    a272:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    a276:	fc 23       	jnz	$-6      	;abs 0xa270
    a278:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    a27c:	09 9a       	cmp	r10,	r9	
    a27e:	02 28       	jnc	$+6      	;abs 0xa284
    a280:	09 8a       	sub	r10,	r9	
    a282:	01 3c       	jmp	$+4      	;abs 0xa286
    a284:	09 43       	clr	r9		
    a286:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a28a:	05 24       	jz	$+12     	;abs 0xa296
    a28c:	09 95       	cmp	r5,	r9	
    a28e:	02 28       	jnc	$+6      	;abs 0xa294
    a290:	09 85       	sub	r5,	r9	
    a292:	01 3c       	jmp	$+4      	;abs 0xa296
    a294:	09 43       	clr	r9		
    a296:	05 4d       	mov	r13,	r5	
    a298:	07 9d       	cmp	r13,	r7	
    a29a:	01 2c       	jc	$+4      	;abs 0xa29e
    a29c:	05 47       	mov	r7,	r5	
    a29e:	4f 93       	tst.b	r15		
    a2a0:	0d 38       	jl	$+28     	;abs 0xa2bc
    a2a2:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    a2a6:	06 00 
    a2a8:	06 43       	clr	r6		
    a2aa:	0b 43       	clr	r11		
    a2ac:	0e 3c       	jmp	$+30     	;abs 0xa2ca
    a2ae:	0f 41       	mov	r1,	r15	
    a2b0:	0f 56       	add	r6,	r15	
    a2b2:	6f 4f       	mov.b	@r15,	r15	
    a2b4:	8f 11       	sxt	r15		
    a2b6:	16 53       	inc	r6		
    a2b8:	88 12       	call	r8		
    a2ba:	01 3c       	jmp	$+4      	;abs 0xa2be
    a2bc:	06 43       	clr	r6		
    a2be:	06 9a       	cmp	r10,	r6	
    a2c0:	f6 3b       	jl	$-18     	;abs 0xa2ae
    a2c2:	0b 4a       	mov	r10,	r11	
    a2c4:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    a2c8:	06 00 
    a2ca:	05 8b       	sub	r11,	r5	
    a2cc:	05 3c       	jmp	$+12     	;abs 0xa2d8
    a2ce:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    a2d2:	8f 11       	sxt	r15		
    a2d4:	88 12       	call	r8		
    a2d6:	1b 53       	inc	r11		
    a2d8:	0f 45       	mov	r5,	r15	
    a2da:	0f 5b       	add	r11,	r15	
    a2dc:	0f 99       	cmp	r9,	r15	
    a2de:	f7 2b       	jnc	$-16     	;abs 0xa2ce
    a2e0:	0a 3c       	jmp	$+22     	;abs 0xa2f6
    a2e2:	06 43       	clr	r6		
    a2e4:	0b 43       	clr	r11		
    a2e6:	07 3c       	jmp	$+16     	;abs 0xa2f6
    a2e8:	1b 53       	inc	r11		
    a2ea:	0f 41       	mov	r1,	r15	
    a2ec:	0f 56       	add	r6,	r15	
    a2ee:	6f 4f       	mov.b	@r15,	r15	
    a2f0:	8f 11       	sxt	r15		
    a2f2:	16 53       	inc	r6		
    a2f4:	88 12       	call	r8		
    a2f6:	06 9a       	cmp	r10,	r6	
    a2f8:	f7 3b       	jl	$-16     	;abs 0xa2e8
    a2fa:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a2fe:	02 24       	jz	$+6      	;abs 0xa304
    a300:	4a 44       	mov.b	r4,	r10	
    a302:	08 3c       	jmp	$+18     	;abs 0xa314
    a304:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    a308:	0a 8b       	sub	r11,	r10	
    a30a:	0d 3c       	jmp	$+28     	;abs 0xa326
    a30c:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    a310:	88 12       	call	r8		
    a312:	7a 53       	add.b	#-1,	r10	;r3 As==11
    a314:	4a 93       	tst.b	r10		
    a316:	fa 23       	jnz	$-10     	;abs 0xa30c
    a318:	44 44       	mov.b	r4,	r4	
    a31a:	0b 54       	add	r4,	r11	
    a31c:	f3 3f       	jmp	$-24     	;abs 0xa304
    a31e:	37 53       	add	#-1,	r7	;r3 As==11
    a320:	8f 11       	sxt	r15		
    a322:	88 12       	call	r8		
    a324:	1b 53       	inc	r11		
    a326:	0f 4a       	mov	r10,	r15	
    a328:	0f 5b       	add	r11,	r15	
    a32a:	6f 4f       	mov.b	@r15,	r15	
    a32c:	4f 93       	tst.b	r15		
    a32e:	07 24       	jz	$+16     	;abs 0xa33e
    a330:	07 93       	tst	r7		
    a332:	f5 23       	jnz	$-20     	;abs 0xa31e
    a334:	04 3c       	jmp	$+10     	;abs 0xa33e
    a336:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    a33a:	88 12       	call	r8		
    a33c:	1b 53       	inc	r11		
    a33e:	0b 99       	cmp	r9,	r11	
    a340:	fa 2b       	jnc	$-10     	;abs 0xa336
    a342:	0f 4b       	mov	r11,	r15	
    a344:	31 52       	add	#8,	r1	;r2 As==11
    a346:	34 41       	pop	r4		
    a348:	35 41       	pop	r5		
    a34a:	36 41       	pop	r6		
    a34c:	37 41       	pop	r7		
    a34e:	38 41       	pop	r8		
    a350:	39 41       	pop	r9		
    a352:	3a 41       	pop	r10		
    a354:	3b 41       	pop	r11		
    a356:	30 41       	ret			

0000a358 <vuprintf>:
    a358:	0b 12       	push	r11		
    a35a:	0a 12       	push	r10		
    a35c:	09 12       	push	r9		
    a35e:	08 12       	push	r8		
    a360:	07 12       	push	r7		
    a362:	06 12       	push	r6		
    a364:	05 12       	push	r5		
    a366:	04 12       	push	r4		
    a368:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    a36c:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    a370:	06 4e       	mov	r14,	r6	
    a372:	05 4d       	mov	r13,	r5	
    a374:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    a378:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a37c:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a380:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a384:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a388:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a38c:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    a390:	07 43       	clr	r7		
    a392:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    a396:	0e 41       	mov	r1,	r14	
    a398:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    a39c:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    a3a0:	30 40 d2 a9 	br	#0xa9d2	
    a3a4:	0f 46       	mov	r6,	r15	
    a3a6:	1f 53       	inc	r15		
    a3a8:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    a3ac:	07 93       	tst	r7		
    a3ae:	1e 20       	jnz	$+62     	;abs 0xa3ec
    a3b0:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a3b4:	13 20       	jnz	$+40     	;abs 0xa3dc
    a3b6:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    a3ba:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a3be:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    a3c2:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a3c6:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a3ca:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a3ce:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a3d2:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a3d6:	30 40 c8 a9 	br	#0xa9c8	
    a3da:	05 47       	mov	r7,	r5	
    a3dc:	8e 11       	sxt	r14		
    a3de:	0f 4e       	mov	r14,	r15	
    a3e0:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    a3e4:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    a3e8:	30 40 ae a9 	br	#0xa9ae	
    a3ec:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    a3f0:	c5 24       	jz	$+396    	;abs 0xa57c
    a3f2:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a3f6:	27 34       	jge	$+80     	;abs 0xa446
    a3f8:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    a3fc:	94 24       	jz	$+298    	;abs 0xa526
    a3fe:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    a402:	1a 34       	jge	$+54     	;abs 0xa438
    a404:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    a408:	77 24       	jz	$+240    	;abs 0xa4f8
    a40a:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a40e:	0a 34       	jge	$+22     	;abs 0xa424
    a410:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    a414:	42 24       	jz	$+134    	;abs 0xa49a
    a416:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a41a:	e0 27       	jz	$-62     	;abs 0xa3dc
    a41c:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    a420:	32 20       	jnz	$+102    	;abs 0xa486
    a422:	56 3c       	jmp	$+174    	;abs 0xa4d0
    a424:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    a428:	49 24       	jz	$+148    	;abs 0xa4bc
    a42a:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    a42e:	5b 24       	jz	$+184    	;abs 0xa4e6
    a430:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a434:	28 20       	jnz	$+82     	;abs 0xa486
    a436:	47 3c       	jmp	$+144    	;abs 0xa4c6
    a438:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    a43c:	8c 38       	jl	$+282    	;abs 0xa556
    a43e:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    a442:	21 20       	jnz	$+68     	;abs 0xa486
    a444:	e9 3c       	jmp	$+468    	;abs 0xa618
    a446:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    a44a:	24 24       	jz	$+74     	;abs 0xa494
    a44c:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a450:	0a 34       	jge	$+22     	;abs 0xa466
    a452:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    a456:	e3 24       	jz	$+456    	;abs 0xa61e
    a458:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    a45c:	22 24       	jz	$+70     	;abs 0xa4a2
    a45e:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a462:	11 20       	jnz	$+36     	;abs 0xa486
    a464:	dc 3c       	jmp	$+442    	;abs 0xa61e
    a466:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    a46a:	98 24       	jz	$+306    	;abs 0xa59c
    a46c:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    a470:	04 34       	jge	$+10     	;abs 0xa47a
    a472:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a476:	07 20       	jnz	$+16     	;abs 0xa486
    a478:	b8 3c       	jmp	$+370    	;abs 0xa5ea
    a47a:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    a47e:	d1 24       	jz	$+420    	;abs 0xa622
    a480:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    a484:	d2 24       	jz	$+422    	;abs 0xa62a
    a486:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    a48a:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    a48e:	08 89       	sub	r9,	r8	
    a490:	30 40 9c a9 	br	#0xa99c	
    a494:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a498:	cb 3c       	jmp	$+408    	;abs 0xa630
    a49a:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a49e:	30 40 cc a9 	br	#0xa9cc	
    a4a2:	69 41       	mov.b	@r1,	r9	
    a4a4:	59 f3       	and.b	#1,	r9	;r3 As==01
    a4a6:	6e 41       	mov.b	@r1,	r14	
    a4a8:	04 24       	jz	$+10     	;abs 0xa4b2
    a4aa:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    a4ae:	6e d3       	bis.b	#2,	r14	;r3 As==10
    a4b0:	01 3c       	jmp	$+4      	;abs 0xa4b4
    a4b2:	5e d3       	bis.b	#1,	r14	;r3 As==01
    a4b4:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    a4b8:	30 40 cc a9 	br	#0xa9cc	
    a4bc:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a4c0:	00 00 
    a4c2:	30 40 cc a9 	br	#0xa9cc	
    a4c6:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a4ca:	02 00 
    a4cc:	30 40 cc a9 	br	#0xa9cc	
    a4d0:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a4d4:	02 00 
    a4d6:	02 20       	jnz	$+6      	;abs 0xa4dc
    a4d8:	30 40 cc a9 	br	#0xa9cc	
    a4dc:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    a4e0:	02 00 
    a4e2:	30 40 cc a9 	br	#0xa9cc	
    a4e6:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a4ea:	02 24       	jz	$+6      	;abs 0xa4f0
    a4ec:	30 40 b2 a9 	br	#0xa9b2	
    a4f0:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    a4f4:	30 40 cc a9 	br	#0xa9cc	
    a4f8:	0e 45       	mov	r5,	r14	
    a4fa:	2e 53       	incd	r14		
    a4fc:	2a 45       	mov	@r5,	r10	
    a4fe:	0a 93       	tst	r10		
    a500:	03 38       	jl	$+8      	;abs 0xa508
    a502:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a506:	0d 3c       	jmp	$+28     	;abs 0xa522
    a508:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a50c:	02 24       	jz	$+6      	;abs 0xa512
    a50e:	30 40 c2 a9 	br	#0xa9c2	
    a512:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a516:	00 00 
    a518:	3a e3       	inv	r10		
    a51a:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a51e:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    a522:	05 4e       	mov	r14,	r5	
    a524:	27 3c       	jmp	$+80     	;abs 0xa574
    a526:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    a52a:	15 20       	jnz	$+44     	;abs 0xa556
    a52c:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a530:	12 20       	jnz	$+38     	;abs 0xa556
    a532:	69 41       	mov.b	@r1,	r9	
    a534:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    a538:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a53a:	01 24       	jz	$+4      	;abs 0xa53e
    a53c:	4e 43       	clr.b	r14		
    a53e:	4e 4e       	mov.b	r14,	r14	
    a540:	0e 11       	rra	r14		
    a542:	0e 43       	clr	r14		
    a544:	4e 10       	rrc.b	r14		
    a546:	6a 41       	mov.b	@r1,	r10	
    a548:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    a54c:	4a de       	bis.b	r14,	r10	
    a54e:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a552:	30 40 cc a9 	br	#0xa9cc	
    a556:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    a55a:	0a 5a       	rla	r10		
    a55c:	0c 4a       	mov	r10,	r12	
    a55e:	0c 5c       	rla	r12		
    a560:	0c 5c       	rla	r12		
    a562:	0a 5c       	add	r12,	r10	
    a564:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a568:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    a56c:	26 00 
    a56e:	8e 11       	sxt	r14		
    a570:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    a574:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    a578:	30 40 cc a9 	br	#0xa9cc	
    a57c:	07 45       	mov	r5,	r7	
    a57e:	27 53       	incd	r7		
    a580:	6e 45       	mov.b	@r5,	r14	
    a582:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a586:	03 20       	jnz	$+8      	;abs 0xa58e
    a588:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a58c:	26 27       	jz	$-434    	;abs 0xa3da
    a58e:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    a592:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    a596:	0e 41       	mov	r1,	r14	
    a598:	2e 52       	add	#4,	r14	;r2 As==10
    a59a:	03 3c       	jmp	$+8      	;abs 0xa5a2
    a59c:	07 45       	mov	r5,	r7	
    a59e:	27 53       	incd	r7		
    a5a0:	2e 45       	mov	@r5,	r14	
    a5a2:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a5a6:	07 24       	jz	$+16     	;abs 0xa5b6
    a5a8:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    a5ac:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    a5b0:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    a5b4:	06 3c       	jmp	$+14     	;abs 0xa5c2
    a5b6:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a5ba:	03 24       	jz	$+8      	;abs 0xa5c2
    a5bc:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    a5c0:	30 00 
    a5c2:	0e 93       	tst	r14		
    a5c4:	02 20       	jnz	$+6      	;abs 0xa5ca
    a5c6:	3e 40 b2 ab 	mov	#-21582,r14	;#0xabb2
    a5ca:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    a5ce:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    a5d2:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    a5d6:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    a5da:	b0 12 c0 a1 	call	#0xa1c0	
    a5de:	21 52       	add	#4,	r1	;r2 As==10
    a5e0:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    a5e4:	05 47       	mov	r7,	r5	
    a5e6:	30 40 ae a9 	br	#0xa9ae	
    a5ea:	07 45       	mov	r5,	r7	
    a5ec:	27 53       	incd	r7		
    a5ee:	29 45       	mov	@r5,	r9	
    a5f0:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    a5f4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a5f6:	09 93       	tst	r9		
    a5f8:	01 20       	jnz	$+4      	;abs 0xa5fc
    a5fa:	4e 43       	clr.b	r14		
    a5fc:	4e 5e       	rla.b	r14		
    a5fe:	4e 5e       	rla.b	r14		
    a600:	4e 5e       	rla.b	r14		
    a602:	6a 41       	mov.b	@r1,	r10	
    a604:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    a608:	4a de       	bis.b	r14,	r10	
    a60a:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a60e:	05 47       	mov	r7,	r5	
    a610:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    a614:	28 00 
    a616:	53 3c       	jmp	$+168    	;abs 0xa6be
    a618:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a61c:	06 3c       	jmp	$+14     	;abs 0xa62a
    a61e:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    a622:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    a626:	28 00 
    a628:	03 3c       	jmp	$+8      	;abs 0xa630
    a62a:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    a62e:	28 00 
    a630:	6b 41       	mov.b	@r1,	r11	
    a632:	6b b3       	bit.b	#2,	r11	;r3 As==10
    a634:	24 24       	jz	$+74     	;abs 0xa67e
    a636:	0c 45       	mov	r5,	r12	
    a638:	3c 52       	add	#8,	r12	;r2 As==11
    a63a:	28 45       	mov	@r5,	r8	
    a63c:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    a640:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    a644:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    a648:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    a64c:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    a650:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    a654:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    a658:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    a65c:	08 93       	tst	r8		
    a65e:	06 20       	jnz	$+14     	;abs 0xa66c
    a660:	07 93       	tst	r7		
    a662:	04 20       	jnz	$+10     	;abs 0xa66c
    a664:	06 93       	tst	r6		
    a666:	02 20       	jnz	$+6      	;abs 0xa66c
    a668:	0b 93       	tst	r11		
    a66a:	02 24       	jz	$+6      	;abs 0xa670
    a66c:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a670:	0b 5b       	rla	r11		
    a672:	0b 43       	clr	r11		
    a674:	0b 6b       	rlc	r11		
    a676:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    a67a:	05 4c       	mov	r12,	r5	
    a67c:	20 3c       	jmp	$+66     	;abs 0xa6be
    a67e:	5b f3       	and.b	#1,	r11	;r3 As==01
    a680:	07 45       	mov	r5,	r7	
    a682:	0d 24       	jz	$+28     	;abs 0xa69e
    a684:	27 52       	add	#4,	r7	;r2 As==10
    a686:	28 45       	mov	@r5,	r8	
    a688:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    a68c:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    a690:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    a694:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    a698:	08 93       	tst	r8		
    a69a:	09 20       	jnz	$+20     	;abs 0xa6ae
    a69c:	06 3c       	jmp	$+14     	;abs 0xa6aa
    a69e:	27 53       	incd	r7		
    a6a0:	2b 45       	mov	@r5,	r11	
    a6a2:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    a6a6:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    a6aa:	0b 93       	tst	r11		
    a6ac:	02 24       	jz	$+6      	;abs 0xa6b2
    a6ae:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a6b2:	0b 5b       	rla	r11		
    a6b4:	0b 43       	clr	r11		
    a6b6:	0b 6b       	rlc	r11		
    a6b8:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    a6bc:	05 47       	mov	r7,	r5	
    a6be:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a6c2:	12 24       	jz	$+38     	;abs 0xa6e8
    a6c4:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    a6c8:	0f 20       	jnz	$+32     	;abs 0xa6e8
    a6ca:	68 41       	mov.b	@r1,	r8	
    a6cc:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    a6d0:	28 00 
    a6d2:	03 20       	jnz	$+8      	;abs 0xa6da
    a6d4:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    a6d8:	05 3c       	jmp	$+12     	;abs 0xa6e4
    a6da:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a6de:	04 20       	jnz	$+10     	;abs 0xa6e8
    a6e0:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    a6e4:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    a6e8:	68 41       	mov.b	@r1,	r8	
    a6ea:	68 b2       	bit.b	#4,	r8	;r2 As==10
    a6ec:	30 24       	jz	$+98     	;abs 0xa74e
    a6ee:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    a6f2:	2d 24       	jz	$+92     	;abs 0xa74e
    a6f4:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    a6f8:	02 00 
    a6fa:	68 b3       	bit.b	#2,	r8	;r3 As==10
    a6fc:	11 24       	jz	$+36     	;abs 0xa720
    a6fe:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    a702:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    a706:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    a70a:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    a70e:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    a712:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    a716:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    a71a:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    a71e:	17 3c       	jmp	$+48     	;abs 0xa74e
    a720:	58 b3       	bit.b	#1,	r8	;r3 As==01
    a722:	0f 24       	jz	$+32     	;abs 0xa742
    a724:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    a728:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    a72c:	3a e3       	inv	r10		
    a72e:	3b e3       	inv	r11		
    a730:	0e 4a       	mov	r10,	r14	
    a732:	0f 4b       	mov	r11,	r15	
    a734:	1e 53       	inc	r14		
    a736:	0f 63       	adc	r15		
    a738:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    a73c:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    a740:	06 3c       	jmp	$+14     	;abs 0xa74e
    a742:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    a746:	3a e3       	inv	r10		
    a748:	1a 53       	inc	r10		
    a74a:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    a74e:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    a752:	68 b3       	bit.b	#2,	r8	;r3 As==10
    a754:	6a 24       	jz	$+214    	;abs 0xa82a
    a756:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    a75a:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    a75e:	3c 00 
    a760:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    a764:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    a768:	07 41       	mov	r1,	r7	
    a76a:	37 50 1a 00 	add	#26,	r7	;#0x001a
    a76e:	09 46       	mov	r6,	r9	
    a770:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    a774:	32 00 
    a776:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    a77a:	8b 10       	swpb	r11		
    a77c:	8b 11       	sxt	r11		
    a77e:	8b 10       	swpb	r11		
    a780:	8b 11       	sxt	r11		
    a782:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    a786:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    a78a:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    a78e:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a792:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a796:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a79a:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a79e:	0c 49       	mov	r9,	r12	
    a7a0:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    a7a4:	0e 48       	mov	r8,	r14	
    a7a6:	0f 44       	mov	r4,	r15	
    a7a8:	b0 12 0c ab 	call	#0xab0c	
    a7ac:	31 52       	add	#8,	r1	;r2 As==11
    a7ae:	0b 4c       	mov	r12,	r11	
    a7b0:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    a7b4:	05 34       	jge	$+12     	;abs 0xa7c0
    a7b6:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    a7ba:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    a7be:	0c 3c       	jmp	$+26     	;abs 0xa7d8
    a7c0:	4b 4c       	mov.b	r12,	r11	
    a7c2:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a7c6:	03 24       	jz	$+8      	;abs 0xa7ce
    a7c8:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    a7cc:	02 3c       	jmp	$+6      	;abs 0xa7d2
    a7ce:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    a7d2:	4a 5b       	add.b	r11,	r10	
    a7d4:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    a7d8:	06 47       	mov	r7,	r6	
    a7da:	36 53       	add	#-1,	r6	;r3 As==11
    a7dc:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a7e0:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a7e4:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a7e8:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    a7ec:	0c 49       	mov	r9,	r12	
    a7ee:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    a7f2:	0e 48       	mov	r8,	r14	
    a7f4:	0f 44       	mov	r4,	r15	
    a7f6:	b0 12 e6 aa 	call	#0xaae6	
    a7fa:	31 52       	add	#8,	r1	;r2 As==11
    a7fc:	09 4c       	mov	r12,	r9	
    a7fe:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    a802:	08 4e       	mov	r14,	r8	
    a804:	04 4f       	mov	r15,	r4	
    a806:	37 53       	add	#-1,	r7	;r3 As==11
    a808:	0c 93       	tst	r12		
    a80a:	b2 23       	jnz	$-154    	;abs 0xa770
    a80c:	0d 93       	tst	r13		
    a80e:	b0 23       	jnz	$-158    	;abs 0xa770
    a810:	0e 93       	tst	r14		
    a812:	ae 23       	jnz	$-162    	;abs 0xa770
    a814:	0f 93       	tst	r15		
    a816:	ac 23       	jnz	$-166    	;abs 0xa770
    a818:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    a81c:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    a820:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    a824:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    a828:	6c 3c       	jmp	$+218    	;abs 0xa902
    a82a:	58 b3       	bit.b	#1,	r8	;r3 As==01
    a82c:	3e 24       	jz	$+126    	;abs 0xa8aa
    a82e:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    a832:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    a836:	08 41       	mov	r1,	r8	
    a838:	38 50 1a 00 	add	#26,	r8	;#0x001a
    a83c:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    a840:	89 10       	swpb	r9		
    a842:	89 11       	sxt	r9		
    a844:	89 10       	swpb	r9		
    a846:	89 11       	sxt	r9		
    a848:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    a84c:	0d 49       	mov	r9,	r13	
    a84e:	0e 44       	mov	r4,	r14	
    a850:	0f 47       	mov	r7,	r15	
    a852:	b0 12 7e aa 	call	#0xaa7e	
    a856:	0b 4e       	mov	r14,	r11	
    a858:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    a85c:	05 34       	jge	$+12     	;abs 0xa868
    a85e:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    a862:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    a866:	0c 3c       	jmp	$+26     	;abs 0xa880
    a868:	4b 4e       	mov.b	r14,	r11	
    a86a:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a86e:	03 24       	jz	$+8      	;abs 0xa876
    a870:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    a874:	02 3c       	jmp	$+6      	;abs 0xa87a
    a876:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    a87a:	4a 5b       	add.b	r11,	r10	
    a87c:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    a880:	06 48       	mov	r8,	r6	
    a882:	36 53       	add	#-1,	r6	;r3 As==11
    a884:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    a888:	0d 49       	mov	r9,	r13	
    a88a:	0e 44       	mov	r4,	r14	
    a88c:	0f 47       	mov	r7,	r15	
    a88e:	b0 12 48 aa 	call	#0xaa48	
    a892:	04 4e       	mov	r14,	r4	
    a894:	07 4f       	mov	r15,	r7	
    a896:	38 53       	add	#-1,	r8	;r3 As==11
    a898:	0e 93       	tst	r14		
    a89a:	d0 23       	jnz	$-94     	;abs 0xa83c
    a89c:	0f 93       	tst	r15		
    a89e:	ce 23       	jnz	$-98     	;abs 0xa83c
    a8a0:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    a8a4:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    a8a8:	2c 3c       	jmp	$+90     	;abs 0xa902
    a8aa:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    a8ae:	08 41       	mov	r1,	r8	
    a8b0:	38 50 1a 00 	add	#26,	r8	;#0x001a
    a8b4:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    a8b8:	0f 47       	mov	r7,	r15	
    a8ba:	b0 12 40 aa 	call	#0xaa40	
    a8be:	0d 4f       	mov	r15,	r13	
    a8c0:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    a8c4:	05 34       	jge	$+12     	;abs 0xa8d0
    a8c6:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    a8ca:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    a8ce:	0c 3c       	jmp	$+26     	;abs 0xa8e8
    a8d0:	4d 4f       	mov.b	r15,	r13	
    a8d2:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    a8d6:	03 24       	jz	$+8      	;abs 0xa8de
    a8d8:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    a8dc:	02 3c       	jmp	$+6      	;abs 0xa8e2
    a8de:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    a8e2:	4c 5d       	add.b	r13,	r12	
    a8e4:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    a8e8:	06 48       	mov	r8,	r6	
    a8ea:	36 53       	add	#-1,	r6	;r3 As==11
    a8ec:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    a8f0:	0f 47       	mov	r7,	r15	
    a8f2:	b0 12 26 aa 	call	#0xaa26	
    a8f6:	07 4f       	mov	r15,	r7	
    a8f8:	38 53       	add	#-1,	r8	;r3 As==11
    a8fa:	0f 93       	tst	r15		
    a8fc:	db 23       	jnz	$-72     	;abs 0xa8b4
    a8fe:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    a902:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    a906:	28 00 
    a908:	02 24       	jz	$+6      	;abs 0xa90e
    a90a:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a90e:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a912:	2a 24       	jz	$+86     	;abs 0xa968
    a914:	0f 41       	mov	r1,	r15	
    a916:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    a91a:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    a91e:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    a922:	8a 10       	swpb	r10		
    a924:	8a 11       	sxt	r10		
    a926:	8a 10       	swpb	r10		
    a928:	8a 11       	sxt	r10		
    a92a:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    a92e:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    a932:	0a 46       	mov	r6,	r10	
    a934:	8a 10       	swpb	r10		
    a936:	8a 11       	sxt	r10		
    a938:	8a 10       	swpb	r10		
    a93a:	8a 11       	sxt	r10		
    a93c:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    a940:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    a944:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    a948:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    a94c:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    a950:	2c 83       	decd	r12		
    a952:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    a956:	0e 2c       	jc	$+30     	;abs 0xa974
    a958:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    a95c:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    a960:	4e 8c       	sub.b	r12,	r14	
    a962:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    a966:	06 3c       	jmp	$+14     	;abs 0xa974
    a968:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a96c:	03 24       	jz	$+8      	;abs 0xa974
    a96e:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    a972:	30 00 
    a974:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    a978:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    a97c:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    a980:	0e 46       	mov	r6,	r14	
    a982:	1e 53       	inc	r14		
    a984:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    a988:	b0 12 c0 a1 	call	#0xa1c0	
    a98c:	21 52       	add	#4,	r1	;r2 As==10
    a98e:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    a992:	0d 3c       	jmp	$+28     	;abs 0xa9ae
    a994:	7f 49       	mov.b	@r9+,	r15	
    a996:	8f 11       	sxt	r15		
    a998:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    a99c:	0e 49       	mov	r9,	r14	
    a99e:	0e 58       	add	r8,	r14	
    a9a0:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    a9a4:	f7 2b       	jnc	$-16     	;abs 0xa994
    a9a6:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    a9aa:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    a9ae:	07 43       	clr	r7		
    a9b0:	0e 3c       	jmp	$+30     	;abs 0xa9ce
    a9b2:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    a9b6:	30 00 
    a9b8:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    a9bc:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a9c0:	03 3c       	jmp	$+8      	;abs 0xa9c8
    a9c2:	05 4e       	mov	r14,	r5	
    a9c4:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    a9c8:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    a9cc:	17 43       	mov	#1,	r7	;r3 As==01
    a9ce:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    a9d2:	6e 46       	mov.b	@r6,	r14	
    a9d4:	4e 93       	tst.b	r14		
    a9d6:	02 24       	jz	$+6      	;abs 0xa9dc
    a9d8:	30 40 a4 a3 	br	#0xa3a4	
    a9dc:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    a9e0:	31 50 4a 00 	add	#74,	r1	;#0x004a
    a9e4:	34 41       	pop	r4		
    a9e6:	35 41       	pop	r5		
    a9e8:	36 41       	pop	r6		
    a9ea:	37 41       	pop	r7		
    a9ec:	38 41       	pop	r8		
    a9ee:	39 41       	pop	r9		
    a9f0:	3a 41       	pop	r10		
    a9f2:	3b 41       	pop	r11		
    a9f4:	30 41       	ret			

0000a9f6 <puts>:
    a9f6:	0b 12       	push	r11		
    a9f8:	0b 4f       	mov	r15,	r11	
    a9fa:	6f 4b       	mov.b	@r11,	r15	
    a9fc:	4f 93       	tst.b	r15		
    a9fe:	06 24       	jz	$+14     	;abs 0xaa0c
    aa00:	1b 53       	inc	r11		
    aa02:	8f 11       	sxt	r15		
    aa04:	b0 12 96 a1 	call	#0xa196	
    aa08:	0f 93       	tst	r15		
    aa0a:	f7 37       	jge	$-16     	;abs 0xa9fa
    aa0c:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    aa10:	05 20       	jnz	$+12     	;abs 0xaa1c
    aa12:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    aa16:	b0 12 96 a1 	call	#0xa196	
    aa1a:	01 3c       	jmp	$+4      	;abs 0xaa1e
    aa1c:	3f 43       	mov	#-1,	r15	;r3 As==11
    aa1e:	3b 41       	pop	r11		
    aa20:	30 41       	ret			

0000aa22 <exit>:
    aa22:	02 4f       	mov	r15,	r2	
    aa24:	fe 3f       	jmp	$-2      	;abs 0xaa22

0000aa26 <__udivhi3>:
    aa26:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    aa2a:	0d 4e       	mov	r14,	r13	
    aa2c:	0e 43       	clr	r14		
    aa2e:	0f 5f       	rla	r15		
    aa30:	0e 6e       	rlc	r14		
    aa32:	0e 9d       	cmp	r13,	r14	
    aa34:	02 28       	jnc	$+6      	;abs 0xaa3a
    aa36:	0e 8d       	sub	r13,	r14	
    aa38:	1f d3       	bis	#1,	r15	;r3 As==01
    aa3a:	1c 83       	dec	r12		
    aa3c:	f8 23       	jnz	$-14     	;abs 0xaa2e
    aa3e:	30 41       	ret			

0000aa40 <__umodhi3>:
    aa40:	b0 12 26 aa 	call	#0xaa26	
    aa44:	0f 4e       	mov	r14,	r15	
    aa46:	30 41       	ret			

0000aa48 <__udivsi3>:
    aa48:	0b 12       	push	r11		
    aa4a:	0a 12       	push	r10		
    aa4c:	09 12       	push	r9		
    aa4e:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    aa52:	0a 4c       	mov	r12,	r10	
    aa54:	0b 4d       	mov	r13,	r11	
    aa56:	0c 43       	clr	r12		
    aa58:	0d 43       	clr	r13		
    aa5a:	0e 5e       	rla	r14		
    aa5c:	0f 6f       	rlc	r15		
    aa5e:	0c 6c       	rlc	r12		
    aa60:	0d 6d       	rlc	r13		
    aa62:	0d 9b       	cmp	r11,	r13	
    aa64:	06 28       	jnc	$+14     	;abs 0xaa72
    aa66:	02 20       	jnz	$+6      	;abs 0xaa6c
    aa68:	0c 9a       	cmp	r10,	r12	
    aa6a:	03 28       	jnc	$+8      	;abs 0xaa72
    aa6c:	0c 8a       	sub	r10,	r12	
    aa6e:	0d 7b       	subc	r11,	r13	
    aa70:	1e d3       	bis	#1,	r14	;r3 As==01
    aa72:	19 83       	dec	r9		
    aa74:	f2 23       	jnz	$-26     	;abs 0xaa5a
    aa76:	39 41       	pop	r9		
    aa78:	3a 41       	pop	r10		
    aa7a:	3b 41       	pop	r11		
    aa7c:	30 41       	ret			

0000aa7e <__umodsi3>:
    aa7e:	b0 12 48 aa 	call	#0xaa48	
    aa82:	0e 4c       	mov	r12,	r14	
    aa84:	0f 4d       	mov	r13,	r15	
    aa86:	30 41       	ret			

0000aa88 <__xabi_udivmod64>:
    aa88:	07 12       	push	r7		
    aa8a:	06 12       	push	r6		
    aa8c:	05 12       	push	r5		
    aa8e:	04 12       	push	r4		
    aa90:	30 12 40 00 	push	#64		;#0x0040
    aa94:	04 48       	mov	r8,	r4	
    aa96:	05 49       	mov	r9,	r5	
    aa98:	06 4a       	mov	r10,	r6	
    aa9a:	07 4b       	mov	r11,	r7	
    aa9c:	08 43       	clr	r8		
    aa9e:	09 43       	clr	r9		
    aaa0:	0a 43       	clr	r10		
    aaa2:	0b 43       	clr	r11		
    aaa4:	0c 5c       	rla	r12		
    aaa6:	0d 6d       	rlc	r13		
    aaa8:	0e 6e       	rlc	r14		
    aaaa:	0f 6f       	rlc	r15		
    aaac:	08 68       	rlc	r8		
    aaae:	09 69       	rlc	r9		
    aab0:	0a 6a       	rlc	r10		
    aab2:	0b 6b       	rlc	r11		
    aab4:	0b 97       	cmp	r7,	r11	
    aab6:	0e 28       	jnc	$+30     	;abs 0xaad4
    aab8:	08 20       	jnz	$+18     	;abs 0xaaca
    aaba:	0a 96       	cmp	r6,	r10	
    aabc:	0b 28       	jnc	$+24     	;abs 0xaad4
    aabe:	05 20       	jnz	$+12     	;abs 0xaaca
    aac0:	09 95       	cmp	r5,	r9	
    aac2:	08 28       	jnc	$+18     	;abs 0xaad4
    aac4:	02 20       	jnz	$+6      	;abs 0xaaca
    aac6:	08 94       	cmp	r4,	r8	
    aac8:	05 28       	jnc	$+12     	;abs 0xaad4
    aaca:	08 84       	sub	r4,	r8	
    aacc:	09 75       	subc	r5,	r9	
    aace:	0a 76       	subc	r6,	r10	
    aad0:	0b 77       	subc	r7,	r11	
    aad2:	1c d3       	bis	#1,	r12	;r3 As==01
    aad4:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    aad8:	e5 23       	jnz	$-52     	;abs 0xaaa4
    aada:	21 53       	incd	r1		
    aadc:	34 41       	pop	r4		
    aade:	35 41       	pop	r5		
    aae0:	36 41       	pop	r6		
    aae2:	37 41       	pop	r7		
    aae4:	30 41       	ret			

0000aae6 <__udivdi3>:
    aae6:	0b 12       	push	r11		
    aae8:	0a 12       	push	r10		
    aaea:	09 12       	push	r9		
    aaec:	08 12       	push	r8		
    aaee:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    aaf2:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    aaf6:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    aafa:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    aafe:	b0 12 88 aa 	call	#0xaa88	
    ab02:	38 41       	pop	r8		
    ab04:	39 41       	pop	r9		
    ab06:	3a 41       	pop	r10		
    ab08:	3b 41       	pop	r11		
    ab0a:	30 41       	ret			

0000ab0c <__umoddi3>:
    ab0c:	0b 12       	push	r11		
    ab0e:	0a 12       	push	r10		
    ab10:	09 12       	push	r9		
    ab12:	08 12       	push	r8		
    ab14:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    ab18:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    ab1c:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    ab20:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    ab24:	b0 12 88 aa 	call	#0xaa88	
    ab28:	0c 48       	mov	r8,	r12	
    ab2a:	0d 49       	mov	r9,	r13	
    ab2c:	0e 4a       	mov	r10,	r14	
    ab2e:	0f 4b       	mov	r11,	r15	
    ab30:	38 41       	pop	r8		
    ab32:	39 41       	pop	r9		
    ab34:	3a 41       	pop	r10		
    ab36:	3b 41       	pop	r11		
    ab38:	30 41       	ret			

0000ab3a <__udivmoddi4>:
    ab3a:	0b 12       	push	r11		
    ab3c:	0a 12       	push	r10		
    ab3e:	09 12       	push	r9		
    ab40:	08 12       	push	r8		
    ab42:	07 12       	push	r7		
    ab44:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    ab48:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    ab4c:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    ab50:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    ab54:	b0 12 88 aa 	call	#0xaa88	
    ab58:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    ab5c:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    ab60:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    ab64:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    ab68:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    ab6c:	37 41       	pop	r7		
    ab6e:	38 41       	pop	r8		
    ab70:	39 41       	pop	r9		
    ab72:	3a 41       	pop	r10		
    ab74:	3b 41       	pop	r11		
    ab76:	30 41       	ret			

0000ab78 <_unexpected_>:
    ab78:	00 13       	reti			

0000ab7a <__stop_progExec__>:
    ab7a:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    ab7e:	fd 3f       	jmp	$-4      	;abs 0xab7a

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	6a a0 6a a0 6a a0 6a a0 6a a0 6a a0 6a a0 6a a0     j.j.j.j.j.j.j.j.
    fff0:	6a a0 6a a0 6a a0 6a a0 6a a0 6a a0 6a a0 00 a0     j.j.j.j.j.j.j...
